---

# Core system configurations; iptables, limits and the like.

# This is a requirement for Ansible which is often missing on servers
- yum:
    name=libselinux-python
    state=present

# Check if selinux is available
- stat: path="/etc/selinux/config"
  register: selinux_exists

- selinux: state=disabled
  when: selinux_exists.stat.exists

- name: disable network manager
  tags: networking
  service: name=network-manager state=stopped enabled=no
  ignore_errors: True

- service: name=ntpd state=started enabled=yes

# Operating system tweaks:
- replace:
    dest=/etc/security/limits.d/20-nproc.conf
    regexp='(\*\s+soft\s+nproc\s+)1024$'
    replace='\165536'
    backup=yes

- replace:
    dest=/etc/postfix/main.cf
    regexp='^inet_protocols = all$'
    replace='inet_protocols = ipv4'
    backup=yes

- name: Set security/limits.conf limits
  lineinfile:
    dest=/etc/security/limits.conf
    line="{{ item }}"
    backup=yes
  with_items:
    - "*    soft    nofile    65535"
    - "*    hard    nofile    65535"

# Check if sysctl.conf exists
- stat: path="/etc/sysctl.conf"
  register: sysctl_exists

- action: file path=/etc/sysctl.conf state=touch owner=root group=root mode=0644
  when: not sysctl_exists.stat.exists

- name: set sysctl.conf values
  lineinfile:
    dest=/etc/sysctl.conf
    line="{{ item }}"
    backup=yes
  with_items:
    - "fs.file-max = 65536"
    - "fs.inotify.max_user_watches = 1048576"
    - "net.core.somaxconn = 20000"
    - "vm.swappiness = 1"
    - "kernel.panic = 10"
    - "net.core.rmem_max = 16777216"
    - "net.ipv4.tcp_rmem = 4096 87380 16777216"
    - "net.core.wmem_max = 16777216"
    - "net.ipv4.tcp_wmem = 4096 16384 16777216"
    - "net.ipv4.tcp_fin_timeout = {{ sysctl_tcp_fin_timeout }}"
    - "net.ipv4.tcp_tw_reuse = 1"
    - "net.core.netdev_max_backlog = 10000"
    - "net.ipv4.ip_local_port_range = 15000 65000"

- name: Add wkv_site_env environment variable
  lineinfile:
    dest=/etc/environment
    line="WKV_SITE_ENV={{ wkv_site_env }}"
    backup=yes

- name: Add varnish_control_key environment variable
  lineinfile:
    dest=/etc/environment
    line="VARNISH_CONTROL_KEY={{ varnish.control_key }}"
    backup=yes
  when: varnish is defined and varnish.control_key is defined

- name: Set locales
  lineinfile:
    dest=/etc/locale.conf
    line="{{ item }}"
    backup=yes
  with_items:
    - "LC_CTYPE=en_US.utf8"
    - "LC_ALL=en_US.utf8"

# Disable firewalld and make sure it stays off, we rely on HARDWARE firewalls.
- service: name=firewalld state=stopped
  when:
    disable_iptables == True
  ignore_errors: True

- shell: systemctl disable firewalld
  when:
    disable_iptables == True
  ignore_errors: True

# Copy logrotation definitions
- name: Copy logrotate configs
  copy:
    src=logrotate/{{ item }}
    dest=/etc/logrotate.d/{{ item }}
  with_items:
    - drupal
    - nginx
    - php-fpm
    - syslog
  notify:
    - restart rsyslog


- name: Disable IPv6 DNS
  replace:
    dest: "/etc/sysconfig/network-scripts/ifcfg-eth2"
    regexp: "^DHCPV6C"
    replace: "#DHCPV6C"
  notify:
      - restart network